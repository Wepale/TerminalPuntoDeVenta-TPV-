#BlueJ class context
comment0.params=
comment0.target=ContenedorClientes()
comment0.text=\r\n\ Crea\ un\ contendor\ de\ clientes\ vacio\r\n
comment1.params=otraListaClientes
comment1.target=ContenedorClientes(ContenedorClientes)
comment1.text=\r\n\ Crea\ un\ nuevo\ contendor\ de\ clientes\ copiando\ los\ clientes\ de\ otro\ contendor\r\n\ \r\n\ @param\ otraListaClientes\ El\ ContenedorClientes\ al\ que\ se\ desea\ realizar\ una\ copia\r\n
comment10.params=nombre
comment10.target=ContenedorClientes\ buscarPorNombre(java.lang.String)
comment10.text=\r\n\ Nos\ permite\ buscar\ un\ cliente\ por\ su\ nombre\ o\ raz\u00F3n\ social\r\n\ \r\n\ @param\ \ \ nombre\ \ El\ nombre/raz\u00F3n\ social\ que\ queremos\ buscar\r\n\ @return\ \ Cliente\ El\ cliente\ asociado\ a\ dicho\ nombre/raz\u00F3n\ social,\ null\ si\ no\ existe\r\n
comment2.params=
comment2.target=java.util.ArrayList\ getListaClientes()
comment2.text=\r\n\ Devuelve\ el\ ArrayList\ en\ la\ que\ se\ almacenan\ los\ clientes\r\n\ \r\n\ @return\ \ Los\ clientes\ dados\ de\ alta\ en\ el\ sistema\r\n
comment3.params=
comment3.target=boolean\ estaVacia()
comment3.text=\r\n\ Comprueba\ si\ la\ lista\ de\ clientes\ esta\ vacia\r\n\ \r\n\ @return\ true\ si\ la\ lista\ no\ contiene\ ningun\ cliente,\ false\ en\ caso\ contrario\r\n
comment4.params=cliente
comment4.target=void\ insertarCliente(Modelo.Clientes.Cliente)
comment4.text=\r\n\ Introduce\ un\ nuevo\ cliente\ en\ el\ ArrayList\r\n\ \r\n\ @param\ \ \ Cliente\ \ \ El\ cliente\ a\ introducir\r\n
comment5.params=cliente
comment5.target=void\ eliminarCliente(Modelo.Clientes.Cliente)
comment5.text=\r\n\ M\u00E9todo\ para\ eliminar\ un\ cliente\ del\ ArrayList\r\n\ \r\n\ @param\ Cliente\ \ El\ cliente\ a\ eliminar\r\n
comment6.params=codigo
comment6.target=Modelo.Clientes.Cliente\ buscarPorCodigo(java.lang.String)
comment6.text=\r\n\ Nos\ permite\ buscar\ un\ cliente\ por\ su\ codigo\r\n\ \r\n\ @param\ \ \ String\ \ El\ c\u00F3digo\ de\ cliente\ que\ queremos\ buscar\r\n\ @return\ \ Cliente\ El\ cliente\ asociado\ a\ dicho\ c\u00F3digo,\ null\ si\ no\ existen\ coincidencias\r\n
comment7.params=codigo
comment7.target=boolean\ existeCliente(java.lang.String)
comment7.text=\r\n\ Nos\ permite\ saber\ si\ existe\ un\ cliente\ mediante\ su\ codigo\r\n\ \r\n\ @param\ \ \ String\ \ El\ c\u00F3digo\ de\ cliente\ que\ queremos\ buscar\r\n\ @return\ \ boolean\ true\ si\ existe\ el\ cliente,\ false\ en\ caso\ contrario\r\n
comment8.params=nombre
comment8.target=boolean\ existeNombre(java.lang.String)
comment8.text=\r\n\ Nos\ permite\ saber\ si\ existe\ un\ cliente\ mediante\ su\ nombre\ o\ raz\u00F3n\ social\r\n\ \r\n\ @param\ \ \ String\ \ El\ nombre\ o\ raz\u00F3n\ social\ que\ queremos\ buscar\r\n\ @return\ \ boolean\ true\ si\ existe\ algun\ cliente\ con\ dicho\ nombre,\ false\ en\ caso\ contrario\r\n
comment9.params=nif
comment9.target=Modelo.Clientes.Cliente\ buscarPorNif(java.lang.String)
comment9.text=\r\n\ Nos\ permite\ buscar\ un\ cliente\ por\ su\ nif\r\n\ \r\n\ @param\ \ \ nif\ \ El\ nif\ de\ cliente\ que\ queremos\ buscar\r\n\ @return\ \ Cliente\ El\ cliente\ asociado\ a\ dicho\ nif,\ null\ si\ no\ existe\r\n
numComments=11
